// <auto-generated />
using System;
using GazaAIDNetwork.EF.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GazaAIDNetwork.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250218063053_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<int>("Governotate")
                        .HasColumnType("int");

                    b.Property<int>("Neighborhood")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntityType")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<string>("RepoId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("AuditLogs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56a3d5b6-6547-6a7c-92c3-5abd6d5cca71"),
                            AdminId = "56A8B5D6-9337-4D8B-92C3-5DBD6D5BCA71",
                            CreatedDate = new DateTime(2025, 2, 18, 8, 30, 42, 573, DateTimeKind.Local).AddTicks(7170),
                            Description = "تمت إضافة الآدمن بنجاح",
                            EntityType = 0,
                            Name = 0,
                            RepoId = "56A8B5D6-9337-4D8B-92C3-5DBD6D5BCA71"
                        });
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.CycleAid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CycleAidStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("CycleAids");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.Disability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Hearing")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Mental")
                        .HasColumnType("int");

                    b.Property<int>("Motor")
                        .HasColumnType("int");

                    b.Property<int>("Visual")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId")
                        .IsUnique();

                    b.ToTable("Disabilities");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BloodPressure")
                        .HasColumnType("int");

                    b.Property<int>("Cancer")
                        .HasColumnType("int");

                    b.Property<int>("Diabetes")
                        .HasColumnType("int");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("KidneyFailure")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId")
                        .IsUnique();

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.Displace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrentAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CurrentAddressId");

                    b.HasIndex("FamilyId")
                        .IsUnique();

                    b.ToTable("Displaces");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.Division", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.Family", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateChangeStatusForHusband")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateChangeStatusForWife")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplaceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FinancialSituation")
                        .HasColumnType("int");

                    b.Property<int>("GenderForHusband")
                        .HasColumnType("int");

                    b.Property<int>("GenderForWife")
                        .HasColumnType("int");

                    b.Property<string>("HusbandId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HusbandStatus")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPledge")
                        .HasColumnType("bit");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<int>("NumberMembers")
                        .HasColumnType("int");

                    b.Property<Guid>("OriginalAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RepresentativeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StatusFamily")
                        .HasColumnType("int");

                    b.Property<string>("WifeIdNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WifeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("WifeStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HusbandId");

                    b.HasIndex("OriginalAddressId");

                    b.HasIndex("RepresentativeId");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.InfoRepresentative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<Guid>("ProjectAidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RepresntativeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectAidId");

                    b.HasIndex("RepresntativeId");

                    b.ToTable("InfoRepresentatives");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.OrderAid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FamilyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderAidStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectAidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FamilyId");

                    b.HasIndex("ProjectAidId");

                    b.ToTable("OrderAids");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.ProjectAid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ContinuingUntil")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CycleAidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descreption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectAidStatus")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CycleAidId");

                    b.HasIndex("DivisionId");

                    b.ToTable("ProjectAids");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DivisionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "56A8B5D6-9337-4D8B-92C3-5DBD6D5BCA71",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f334ee5-3782-48ce-ba44-a4f2dda40b29",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FullName = "حمادة حسام حمادة العبادلة",
                            IdNumber = "407069541",
                            LockoutEnabled = false,
                            NormalizedUserName = "407069541",
                            PasswordHash = "AQAAAAIAAYagAAAAEOXryVZ1FYhvxN28JPz+ydSpQCHwPw9WU0sr0FUO23S6TzhV7xEQv27fswDdkG6hqg==",
                            PhoneNumber = "0595195186",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "bf01908a-9d8a-4511-9a4d-abce304a793a",
                            TwoFactorEnabled = false,
                            UserName = "407069541",
                            isDelete = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "E1A7316F-5B6E-4F77-9D77-9C37A1BC912F",
                            Name = "superadmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "56A8B5D6-9337-4D8B-92C3-5DBD6D5BCA71",
                            RoleId = "E1A7316F-5B6E-4F77-9D77-9C37A1BC912F"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.AuditLog", b =>
                {
                    b.HasOne("GazaAIDNetwork.EF.Models.User", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.CycleAid", b =>
                {
                    b.HasOne("GazaAIDNetwork.EF.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.Disability", b =>
                {
                    b.HasOne("GazaAIDNetwork.EF.Models.Family", "Family")
                        .WithOne("Disability")
                        .HasForeignKey("GazaAIDNetwork.EF.Models.Disability", "FamilyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.Disease", b =>
                {
                    b.HasOne("GazaAIDNetwork.EF.Models.Family", "Family")
                        .WithOne("Disease")
                        .HasForeignKey("GazaAIDNetwork.EF.Models.Disease", "FamilyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.Displace", b =>
                {
                    b.HasOne("GazaAIDNetwork.EF.Models.Address", "CurrentAddress")
                        .WithMany()
                        .HasForeignKey("CurrentAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GazaAIDNetwork.EF.Models.Family", "Family")
                        .WithOne("Displace")
                        .HasForeignKey("GazaAIDNetwork.EF.Models.Displace", "FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentAddress");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.Family", b =>
                {
                    b.HasOne("GazaAIDNetwork.EF.Models.User", "Husband")
                        .WithMany()
                        .HasForeignKey("HusbandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GazaAIDNetwork.EF.Models.Address", "OriginalAddress")
                        .WithMany("FamiliesWithOriginalAddress")
                        .HasForeignKey("OriginalAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GazaAIDNetwork.EF.Models.User", "Representative")
                        .WithMany()
                        .HasForeignKey("RepresentativeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Husband");

                    b.Navigation("OriginalAddress");

                    b.Navigation("Representative");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.InfoRepresentative", b =>
                {
                    b.HasOne("GazaAIDNetwork.EF.Models.ProjectAid", "ProjectAid")
                        .WithMany("InfoRepresentatives")
                        .HasForeignKey("ProjectAidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GazaAIDNetwork.EF.Models.User", "Represntative")
                        .WithMany()
                        .HasForeignKey("RepresntativeId");

                    b.Navigation("ProjectAid");

                    b.Navigation("Represntative");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.OrderAid", b =>
                {
                    b.HasOne("GazaAIDNetwork.EF.Models.Family", "Family")
                        .WithMany("OrderAids")
                        .HasForeignKey("FamilyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GazaAIDNetwork.EF.Models.ProjectAid", "ProjectAid")
                        .WithMany("OrderAids")
                        .HasForeignKey("ProjectAidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");

                    b.Navigation("ProjectAid");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.ProjectAid", b =>
                {
                    b.HasOne("GazaAIDNetwork.EF.Models.CycleAid", "CycleAid")
                        .WithMany("ProjectAids")
                        .HasForeignKey("CycleAidId");

                    b.HasOne("GazaAIDNetwork.EF.Models.Division", "Division")
                        .WithMany()
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CycleAid");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.User", b =>
                {
                    b.HasOne("GazaAIDNetwork.EF.Models.Division", "Division")
                        .WithMany("Users")
                        .HasForeignKey("DivisionId");

                    b.Navigation("Division");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GazaAIDNetwork.EF.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GazaAIDNetwork.EF.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GazaAIDNetwork.EF.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GazaAIDNetwork.EF.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.Address", b =>
                {
                    b.Navigation("FamiliesWithOriginalAddress");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.CycleAid", b =>
                {
                    b.Navigation("ProjectAids");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.Division", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.Family", b =>
                {
                    b.Navigation("Disability");

                    b.Navigation("Disease");

                    b.Navigation("Displace");

                    b.Navigation("OrderAids");
                });

            modelBuilder.Entity("GazaAIDNetwork.EF.Models.ProjectAid", b =>
                {
                    b.Navigation("InfoRepresentatives");

                    b.Navigation("OrderAids");
                });
#pragma warning restore 612, 618
        }
    }
}
